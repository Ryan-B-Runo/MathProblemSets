
Common functions to use across multiple programs.

gcd function:

function gcd(a, b) {
  if(b === 0) {
    return a;
  }
  return gcd(b, a % b);
}


return LaTeX string of simplified fraction (gcd() function required)

function simplifyFractionLaTeX(numerator, denominator){
  const d = gcd(numerator, denominator);
  const newNumerator = numerator / d;
  const newDenominator = denominator / d;

  if(newDenominator === 1) {
    return newNumerator;
  }else if (newDenominator === 0) {
    return "undefined";
  }
  if(newNumerator/newDenominator < 0) {
    return "-\\frac{" + Math.abs(newNumerator) + "}{" + Math.abs(newDenominator) + "}";
  }
    return "\\frac{" + Math.abs(newNumerator) + "}{" + Math.abs(newDenominator) + "}";
}


return random integer between two numbers

function randRange(min, max){
  return Math.floor(Math.random() * (Math.floor(max) - Math.ceil(min) + 1)) + Math.ceil(min);
}


this is an efficient algorithm that runs in O(1) but has a max input of 1088.
we will probably never need such a large input size, but add more perfect squares to the array if necesary.

function sqrtSimplifyLaTeX(n){
    if(n < 1089 && n > 0){
        perfectSquares = [1024, 961, 900, 841, 784, 729, 676, 625, 576, 529, 484, 441, 400, 361, 324, 289, 256, 225, 196, 169, 144, 121, 100, 81, 64, 49, 36, 25, 16, 9, 4, 1];
        let square;
        let squared;

        for (let i = 0; i < n; i++) {
            if(n % perfectSquares[i] === 0) {
                square = perfectSquares[i];
                squared = Math.sqrt(perfectSquares[i]);
                break;
            }
        }
        return squared + "\\sqrt{" + n/square + "}";
    }
    return "[INVALID INPUT SIZE]"
}